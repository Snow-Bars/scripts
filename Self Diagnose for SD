#Данный скрипт формирует визуальную форму с кнопками и програсс-баром для сбора первичной диагностической информации пользователем с целью упростить работу техподдержке

#массив для диагностики
$fortest = @()
$fortest += New-Object -TypeName psobject -Property @{description = 'Контроллер домена в '; Name = 'DNS-name'; port = '0'}
$fortest += New-Object -TypeName psobject -Property @{description = 'Контроллер домена в '; Name ='DNS-name'; port = '0'}
$fortest += New-Object -TypeName psobject -Property @{description = 'Ядро сети в'; Name = 'IP-address'; port = '0'}
$fortest += New-Object -TypeName psobject -Property @{description = 'Ядро сети в'; Name = 'IP-address'; port = '0'}
$fortest += New-Object -TypeName psobject -Property @{description = 'Сайт Ya.ru'; Name = 'ya.ru'; port = '443'}
$fortest += New-Object -TypeName psobject -Property @{description = 'web-сервис'; Name = 'DNS-name'; port = '443'}
$fortest += New-Object -TypeName psobject -Property @{description = 'Сервер 1С'; Name = 'DNS-name'; port = '0'}
$fortest += New-Object -TypeName psobject -Property @{description = 'Почтовый сервер'; Name = 'mail...'; port = '25'}

#функция теста порта
Function TestTCP { Param($address, $port, $timeout=3000)
    $socket=New-Object System.Net.Sockets.TcpClient
    try {
        $result=$socket.BeginConnect($address, $port, $NULL, $NULL)
        if (!$result.AsyncWaitHandle.WaitOne($timeout, $False)) {
            throw [System.Exception]::new('Connection Timeout')
        }
        $socket.EndConnect($result) | Out-Null
        $socket.Connected
    }
    finally {
        $socket.Close()
    }
}

#функция пинга и описания результата
Function Test-Conn {
    param (
    [string]$description,
    [string]$objname,
    [string]$port
    )
    $Error.Clear()
    if (Test-Connection $objname -Count 1) { $result = $description + " пингуется`r`n" }
    else {
        $result = $description + " НЕ пингуется. `r`n"
        $result = $result + "Ошибка: " + $Error[0] + "`r`n"
        $exept++
        }
    $text.AppendText($result)
    if ($port -ne "0") { 
        if (TestTCP -address $objname -port $port) {
            $result = $port + " порт для " + $description + " доступен `r`n"
        }
        else {
            $result = $description + " " + $port + " порт НЕ доступен. `r`n"
            $result = $result + "Ошибка: " + $Error[0] + "`r`n"
        }
    $text.AppendText($result)
    Write-Host $exept
    }
}

#Создание формы
$i=0
$exept=0
Add-Type -Assemblyname System.Windows.Forms
$form = New-Object System.Windows.Forms.Form
$form.Text = 'Диагностика'
$label = New-Object System.Windows.Forms.Label
$label.Text = ''
$label.Location = New-Object System.Drawing.Point(20,10)
$label.Size = New-Object System.Drawing.Size(500,20)
$form.Controls.Add($label)
$bar = New-Object System.Windows.Forms.ProgressBar
$bar.Minimum = 0
$bar.Maximum = $fortest.Count+2
$bar.Location = New-Object System.Drawing.Point(20,470)
$bar.Size = New-Object System.Drawing.Size(450,20)
$form.Controls.Add($bar)
$text = New-Object System.Windows.Forms.TextBox
$text.Multiline = $true
$text.Text = 'Нажми кнопку "Диагностика" или клавишу Enter. Либо введи адрес сервера или сайта для диагностики подключения и нажми кнопку "Тестировать подключение"'
$text.Location = New-Object System.Drawing.Point(20,40)
$text.Size = New-Object System.Drawing.Point(450,350)
$form.Controls.Add($text)
$Form.StartPosition = "CenterScreen"
$form.KeyPreview = $true
#реагирование на нажатие Enter и Esc
$form.Add_KeyDown{
    param ( 
        [Parameter(Mandatory)][Object]$sender,
        [Parameter(Mandatory)][System.Windows.Forms.KeyEventArgs]$e
    )
    if($_.KeyCode -eq "Escape"){
        $Form.close()
    }
    if($_.KeyCode -eq "Enter"){
        $button.PerformClick()
    }
}
$button = New-Object Windows.Forms.Button
$button.Text = "Диагностика"
$button.Location = New-Object System.Drawing.Point 20,400
$button.Size = New-Object System.Drawing.Size 200,50
$custom = New-Object Windows.Forms.Button
$custom.Text = "Тестировать подключение"
$custom.Location = New-Object System.Drawing.Point 270,400
$custom.Size = New-Object System.Drawing.Size 200,50

#Действие по нажатии кнопки Диагностика
$button.Add_Click({
    $bar.Value = $i
    $result = (Get-NetIPAddress -IPAddress 10.96*).IPaddress
    $text.Text = "IP адрес компьютера: " + $result + "`r`n"
    $i++
    $bar.Value = $i
    $result = $Env:Username
    $text.AppendText("Имя пользователя: " + $result + "`r`n")
    $i++
    $bar.Value = $i
    foreach ($res in $fortest ) {
        Test-Conn -description $res.description -objname $res.Name -port $res.port
        $i++
        $bar.Value = $i
    }
    if ($exept -ne 0) {
        $label.Text = "Что-то не работает. Иммет смысл обратить в лужбу поддержки, отправиа им эту диагностическую информацию.`r`n"
    }
    else { $label.Text = "Кажется, все ОК." }
    })

#Действие по нажатии кнопки Кастомной проверки
$custom.Add_Click({
    $objname = $text.Text
    $result = (Get-NetIPAddress -IPAddress 10.96*).IPaddress
    $text.Text = "IP адрес компьютера: " + $result + "`r`n"
    Test-Conn -description $objname -objname $objname -port 443
    $bar.Value = $bar.Maximum
})

$form.Controls.Add($button)
$form.Controls.Add($custom)

#Старт формы
$form.Size = New-Object System.Drawing.Size(500,570)
$form.ShowDialog()
